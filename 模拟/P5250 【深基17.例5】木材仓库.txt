博艾市有一个木材仓库，里面可以存储各种长度的木材，但是保证没有两个木材的长度是相同的。

作为仓库负责人，你有时候会进货，有时候会出货，因此需要维护这个库存。

有不超过 100000 条的操作：

进货，格式1 Length：在仓库中放入一根长度为 Length(不超过 10^910 
9
 ) 的木材。如果已经有相同长度的木材那么输出Already Exist。
出货，格式2 Length：从仓库中取出长度为 Length 的木材。
如果没有刚好长度的木材，取出仓库中存在的和要求长度最接近的木材。
如果有多根木材符合要求，取出比较短的一根。
输出取出的木材长度。
如果仓库是空的，输出Empty。
输入格式
无

输出格式
无

输入输出样例
输入 #1 复制
7
1 1
1 5
1 3
2 3
2 3
2 3
2 3
输出 #1 复制
3
1
5
Empty

思路：真就暴力出奇迹了！不说啥了...

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<string>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
#include<fstream>
#include<cmath>
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
#define Set(a) memset(a,0,sizeof(a))
#define F(i,a,b) for(register int i=a,i##end=b;i<=i##end;++i)
#define UF(i,a,b) for(register int i=a,i##end=b;i>=i##end;--i)
#define openf(a) freopen(#a".in","r",stdin);freopen(#a".out","w",stdout)
#define re register
#define ri re int
#define il inline
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
template<typename T> inline T rd(T& x)
{
	T f = 1; x = 0; char c = getchar();
	for (; !isdigit(c); c = getchar()) if (c == '-') f = -1;
	for (; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (T)(c - '0');
	x *= f;
	return x;
}
ll rd() { ll x; rd(x); return x; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
const int inf = 1 << 30;
vector<int> a;
int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        int flag, len;
        scanf("%d%d", &flag, &len);
        if (flag == 1)
        {
            bool ok = 1;
            for (int i = 0; i < a.size(); i++)
            {
                if (len == a[i])
                {
                    printf("Already Exist\n");
                    ok = 0;
                    break;
                }
            }
            if (ok)
            {
                a.push_back(len);
            }
        }
        else
        {
            int minn = int(1e9), x = 0, ans = 0;
            for (int i = 0; i < a.size(); i++)
            {
                if (minn >= abs(len - a[i]) && (minn != abs(len - a[i]) || ans > a[i]))
                {
                    minn = abs(len - a[i]);
                    x = i, ans = a[i];
                }
            }
            if (a.size())
            {
                printf("%d\n", ans);
                a.erase(a.begin() + x);
            }
            else
            {
                printf("Empty\n");
            }
        }
    }
    return 0;
}