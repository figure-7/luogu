题目背景
祝大家庚子鼠年快乐！Best wishes!

也愿肺炎早日得到控制吧，中国加油！

新年到了，小 Z 总是能收到很多的压岁钱。

小 Z 是个非常喜欢氪金的玩家，所以时不时都会把压岁钱花掉一部分用来买皮肤和石头。

但是小 Z 又十分担心压岁钱没过几天就都被自己花完了。

为此，小 Z 有封印大法，能够暂时的把自己的一部分钱封印起来（即无法花费），直到某一天解除封印后才能使用。

题目描述
一共存在有 mm 个事件，且事件分为以下的 33 种类型。

小 Z 得到了 aa 元压岁钱。
小 Z 花掉了 aa 元压岁钱用于买皮肤。
小 Z 把自己的 aa 元钱封印了起来，只有当第 bb 个事件发生前 11 秒才会解除封印，并保证每次小 Z 现有的钱大于等于封印的钱。
当小 Z 的钱在某个事件不够花时，小 Z 会感到不开心，同时钱不够花时小 Z 便不会花钱。

请告诉小 Z ，他的钱在几个事件中会不够花。

输入格式
第一行一个整数 mm，用于表示事件发生的总数。

接下来的 mm 行，首先一个整数 tt，表示事件的类型。

如果 t=1t=1 或 t=2t=2，则接下来一个整数 aa。

如果 t=3t=3，则接下来两个整数 a,ba,b。

输出格式
一行一个整数，表示钱不够花的事件数。

输入输出样例
输入 #1 复制
3
1 10
2 20
2 10
输出 #1 复制
1
输入 #2 复制
5
1 10
3 5 5
2 10
1 10
2 20
输出 #2 复制
1
说明/提示
【样例 1 解释】

第一天：收入 1010 元，余额 1010 元。

第二天：不够支出 2020 元，余额 1010 元。

第三天：支出 1010 元，余额 00 元。

总计：11 天。

【样例 2 解释】

第一天：收入 1010 元，余额 1010 元。

第二天：封印 55 元，余额 55 元。

第三天：不够支出 1010 元，余额 55 元。

第四天：收入 1010 元，余额 1515 元。

第五天：封印解开，支出 2020 元，余额 00 元。

总计：11 天。

【数据范围】

对于 50\%50% 的数据，满足 m,a \leq 5\times 10^3m,a≤5×10 
3
 。

对于 70\%70% 的数据，t \ne 3t 

​	
 =3。

对于 100\%100% 的数据，满足 1 \leq b \le m \leq 10^61≤b≤m≤10 
6
 ，1 \le t \le 31≤t≤3，1 \leq a \leq 10^71≤a≤10 
7
 。

思路：月赛2一题，模拟
（真的是不知道我的代码错在哪里。。。70分3WA）
#include <stdio.h>
#include <iostream>
#include <queue>
#define int long long int
#define N 1000001
using namespace std;
struct node//并没有什么卵用的结构体，事实上在后面的读入中只需要3个变量。 
{
	int id,val,to;//id:事件；val:得到或花掉的钱；to:仅事件3才有的参数[持续到第几天] 
}a[N];
struct lst//这个结构体处理专门一系列的事件三 
{
	int duration,v;//duration代表封印持续到第几天，v代表封印的钱 
	bool operator < (const lst &a)const
	{
		return a.duration<duration;//把持续时间从小到达排序 
	}
}tmp;
int n,s,ans,f;
priority_queue<lst> q;//优先队列 
signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	register int i,j;
	cin>>n;
	for(i=1;i<=n;i++)//枚举事件i 
	{
		while(!q.empty())
		{
			if(q.top().duration==i)//判断某个事件3的持续时间是否已经到了i 
			{
				s=s+q.top().v;//把钱拿回来 
				q.pop();//踢掉 
			}
			else break;//如果不是就不管 
		}
		cin>>a[i].id;//输入事件类型 
		if(a[i].id!=3)//如果不是3 
		{
			cin>>a[i].val;
			if(a[i].id==1)
			{
				s+=a[i].val;//直接赚钱即可 
			}
			else//事件2 
			{
				s-=a[i].val;//花钱 
				if(s<0)//如果没有足够的钱 
				{
					s+=a[i].val;//再加回来 
					ans++;//不满意的次数+1 
				}
			}
		}
		else//事件3 
		{
			cin>>a[i].val>>a[i].to;
			s-=a[i].val;//减钱 
			tmp.duration=a[i].to; 
			tmp.v=a[i].val;
			q.push(tmp);//塞进队列 
		}
		//cout<<s<<endl<<endl;
	}
	cout<<ans<<endl;
	return 0;
}