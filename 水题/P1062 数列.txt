普及/提高-

给定一个正整数k(3≤k≤15)k(3≤k≤15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3k=3时，这个序列是：

1,3,4,9,10,12,13,…1,3,4,9,10,12,13,…

（该序列实际上就是：3^0,3^1,3^0+3^1,3^2,3^0+3^2,3^1+3^2,3^0+3^1+3^2,…3 
0
 ,3 
1
 ,3 
0
 +3 
1
 ,3 
2
 ,3 
0
 +3 
2
 ,3 
1
 +3 
2
 ,3 
0
 +3 
1
 +3 
2
 ,…）

请你求出这个序列的第NN项的值（用1010进制数表示）。

例如，对于k=3k=3，N=100N=100，正确答案应该是981981。

输入格式
22个正整数，用一个空格隔开：

k NkN （kk、NN的含义与上述的问题描述一致，且3≤k≤15,10≤N≤10003≤k≤15,10≤N≤1000）。

输出格式
11个正整数。（整数前不要有空格和其他符号）。

输入输出样例
输入 #1 复制
  3 100
输出 #1 复制
981
说明/提示
NOIP 2006 普及组 第四题

思路：数组先存1，然后遍历，每次取平方之后while循环依次累加数组前面的值
最后返回数组最后一项即可
注意局部变量的使用，以及ll的使用变量个数
（以后写题有ll还是都ll算了，害得我还war了两次 www）
NOIP普及四题水题hhh

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
typedef long long ll;
using namespace std;
int main() {
	vector<ll> curr;
	ll k, n;
	cin >> k >> n;
	ll number = k;
	curr.push_back(1);
	for (int i = 0; i < n - 1; i++) {
		ll a = 0;
		curr.push_back(k);
		ll sum = curr.size();
		while (a != sum - 1 && i < n - 1) {
			ll aim = k;
			aim += curr[a];
			a++;
			i++;
			curr.push_back(aim);
		}
		k *= number;
	}
	cout << curr[n - 1];
}