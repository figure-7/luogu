普及-

小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。

题目描述
这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。

假设内存中有MM个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过M-1M?1，软件会将新单词存入一个未使用的内存单元；若内存中已存入MM个单词，软件会清空最早进入内存的那个单词，腾出单元来，存放新单词。

假设一篇英语文章的长度为NN个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。

输入格式
共22行。每行中两个数之间用一个空格隔开。

第一行为两个正整数M,NM,N，代表内存容量和文章的长度。

第二行为NN个非负整数，按照文章的顺序，每个数（大小不超过10001000）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。

输出格式
一个整数，为软件需要查词典的次数。

输入输出样例
输入 #1 复制
3 7
1 2 1 5 4 4 1
输出 #1 复制
5
说明/提示
每个测试点1s1s

对于10\%10%的数据有M=1,N≤5M=1,N≤5。

对于100\%100%的数据有0≤M≤100,0≤N≤10000≤M≤100,0≤N≤1000。

整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：

空：内存初始状态为空。

1． 11：查找单词1并调入内存。

2． 1 212：查找单词22并调入内存。

3． 1 212：在内存中找到单词11。

4． 1 2 5125：查找单词55并调入内存。

5． 2 5 4254：查找单词44并调入内存替代单词11。

6． 2 5 4254：在内存中找到单词44。

7． 5 4 1541：查找单词1并调入内存替代单词22。

共计查了55次词典。

思路：暴力了，上丢人代码了。

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
typedef long long ll;
using namespace std;
int sum = 0;
int j = 0;
int res = 0;
int main() {
	vector<int> curr;
	vector<int> map;
	int m, n;
	cin >> m >> n;
	for (int i = 0; i < n; i++) {
		int aim;
		cin >> aim;
		curr.push_back(aim);
	}
	while(j < m && sum < n) {
		bool flag = 0;
		for (int k = 0; k < map.size(); k++) {
			if (curr[sum] == map[k]) {
				flag = 1;
				break;
			}
		}
		if (flag) {
			res++;
			sum++;
		}
		else {
			map.push_back(curr[sum]);
			sum++;
			j++;
		}
	}
	j = 0;
	while (sum < n) {
		bool flag = 0;
		for (int k = 0; k < map.size(); k++) {
			if (curr[sum] == map[k]) {
				flag = 1;
				break;
			}
		}
		if (flag) {
			cout << curr[sum];
			res++;
			sum++;
		}
		else {
			if (j >= m)
				j = 0;
			map[j] = curr[sum];
			j++;
			sum++;
		}
	}
	cout << n - res;
}