普及-

春春幼儿园举办了一年一度的“积木大赛”。今年比赛的内容是搭建一座宽度为nn的大厦，大厦可以看成由n块宽度为1的积木组成，第i块积木的最终高度需要是h_ih 
i
?	 。

在搭建开始之前，没有任何积木（可以看成nn块高度为00的积木）。接下来每次操作，小朋友们可以选择一段连续区间[l, r][l,r]，然后将第第 L L块到第 RR 块之间（含第 LL 块和第 R R块）所有积木的高度分别增加11。

小 M M是个聪明的小朋友，她很快想出了建造大厦的最佳策略，使得建造所需的操作次数最少。但她不是一个勤于动手的孩子，所以想请你帮忙实现这个策略，并求出最少的操作次数。

输入格式
包含两行，第一行包含一个整数nn，表示大厦的宽度。

第二行包含nn个整数，第i个整数为h_i h 
i
?	 。

输出格式
建造所需的最少操作数。

输入输出样例
输入 #1 复制
5
2 3 4 1 2
输出 #1 复制
5
说明/提示
【样例解释】

其中一种可行的最佳方案，依次选择

[1,5][1,5] [1,3][1,3] [2,3][2,3] [3,3][3,3] [5,5][5,5]

【数据范围】

对于 30\%30%的数据，有1 ≤ n ≤ 101≤n≤10；

对于 70\%70%的数据，有1 ≤ n ≤ 10001≤n≤1000；

对于 100\%100%的数据，有1 ≤ n ≤ 100000,0 ≤ h_i≤ 100001≤n≤100000,0≤h 
i
?	 ≤10000。

思路：贪心，dp表达式：dp[j] = curr[i] >= curr[j] ? dp[i] : dp[i] + curr[j] - curr[i];
遍历一次针对每个情况后一个比前一个大就加上两者差值，否则直接继承前一项的值
NOIP提高，可能是1题吧，，，比较水

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
typedef long long ll;
using namespace std;
using pii = pair<int, int>;
int main() {
	vector<int> curr;
	int dp[100001];
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int aim;
		cin >> aim;
		curr.push_back(aim);
	}
	dp[0] = curr[0];
	for (int i = 0; i < n - 1; i++) {
		int j = i + 1;
		dp[j] = curr[i] >= curr[j] ? dp[i] : dp[i] + curr[j] - curr[i];
	}
	cout << dp[n - 1];
}