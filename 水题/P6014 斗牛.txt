题目背景
又是一年过去了。

小 Z 在春节期间可以好好的放松放松，于是小 Z 和小伙伴们玩起了牛哄哄（斗牛）。

游戏规则是这样的：

给定 55 张牌，分别从 1 \sim 101∼10。你需要挑选其中的三张牌加起来是 1010 的倍数，另外两张牌的和的个位数则为你最后获得的点数，特别的，如果这两张牌的和是 1010 的倍数，则点数为 1010，也叫做牛哄哄。

如果不能构成 1010 的倍数，则点数为 00，也叫做牛不拢。

如 55 33 22 33 44 的点数是 77，又叫做牛七。

小 Z 觉得玩的不过瘾，于是对上述规则进行了一些改变。

题目描述
给定 nn 张牌，牌的大小为 1 \sim 101∼10。

你需要挑选其中的 n-2n−2 张牌加起来是 1010 的倍数，另外两张牌和的个位数即为你所获得的点数。

特别地，如果这两张牌的和是 1010 的倍数，则点数为 1010，也叫做牛哄哄。

如果任意 n-2n−2 张牌不能构成 1010 的倍数，则点数为 00，也叫做牛不拢。

由于小 Z 想要更开心的玩耍，所以需要你来完成这个程序来帮助小 Z 在 11 秒内知道点数。

输入格式
第一行一个整数 nn，表示一共有 nn 张牌。

第二行 nn 个整数，表示这 nn 张牌的大小。

输出格式
一行一个整数，表示这局牌的点数，点数的范围是 0 \sim 100∼10。

输入输出样例
输入 #1 复制
5
10 10 10 2 3
输出 #1 复制
5
输入 #2 复制
5
3 4 5 6 7
输出 #2 复制
0
说明/提示
【样例 1 解释】

1010 1010 1010 三张牌凑成 1010 的倍数，2+3=52+3=5。

【样例 2 解释】

任意三张牌都不能凑成 1010 的倍数。

【数据范围】

本题采用捆绑测试。

Subtask 1（50 points）：n = 5n=5。
Subtask 2（30 points）：n \le 5 \times 10^3n≤5×10 
3
 。
Subtask 3（20 points）：无特殊限制。
对于 100\%100% 的数据，5 \le n \le 10^65≤n≤10 
6
 。

思路：（暴力超时80以下）先取总和，然后开10范围数组保存所有卡片值的个数
然后两两遍历数组，常数二重遍历每次取两个值，拿总和减，然后看结果是不是10的倍数
是的话直接余10，如果结果是0就返回10，否则返回结果即可
注意当两个数相同和不同时需要分开判断（次数限制不一致）即可

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
typedef long long ll;
typedef long double ld;
using namespace std;
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
inline int read()
{
	int x = 0; char s = getchar();
	while (!isdigit(s))s = getchar();
	while (isdigit(s))x = (x << 1) + (x << 3) + (s ^ 48), s = getchar();
	return x;
}//实现所有直接输入，可无视空格及回车
inline void print(int x)
{
	if (x < 10)putchar(x + '0');
	else {
		print(x / 10);
		putchar(x % 10 + '0');
	}
}//输出存在空格或回车需自行输出
int main() {
	long long sum = 0;
	int res = 0, n = read();
	bool flag = false;
	vector<int> curr(11, 0);
	for (int i = 0; i < n; i++) {
		int a = read();
		curr[a]++;
		sum += a;
	}
	for (int i = 1; i < 11; i++) {
		for (int j = i; j < 11; j++) {
			if (curr[i] > 0 && curr[j] > 0 && i != j) {
				int cur = sum - i - j;
				if (cur % 10 == 0) {
					res = (i + j) % 10;
					if (res == 0)
						res = 10;
					flag = true;
				}
			}
			if (i == j && curr[i] > 1) {
				int cur = sum - i - j;
				if (cur % 10 == 0) {
					res = (i + j) % 10;
					if (res == 0)
						res = 10;
					flag = true;
				}
			}
			if (flag)
				break;
		}
		if (flag)
			break;
	}
	if (flag)
		cout << res;
	else
		cout << 0;
}