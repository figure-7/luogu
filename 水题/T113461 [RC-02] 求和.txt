普及-

题目描述
小 Q 给你了几行字符串，字符串中间包含有一些整数，整数之间可能会有其他字符。

你需要输出每行中所有整数的和。

如果一个行里面一个数都没有则不要输出。

每两个整数之间一定有间隔字符（见样例 33）。

请注意，题目中的整数都是简单的整数，即：整数前面没有多余的符号。

假如数据中有 .，视作分隔符。

输入格式
每行一个字符串。

输出格式
对于每一个包含了整数的字符串，输出一行一个数，即其中数的和。

输入输出样例
输入 #1 复制
su57jdkjth54hjsns-321d 8 ejre
erg(&-^%

weruy4uhnd-
输出 #1 复制
-202
4
输入 #2 复制
          4532984       d    -1
输出 #2 复制
4532983
输入 #3 复制
1-1
1 -1
1--5
1-----------1
-1-1
--1
-2.3
输出 #3 复制
2
0
-4
0
0
-1
1
说明/提示
【样例解释】

第一个样例中，第一行有 57,54,-321,857,54,−321,8 几个数，和为 -202−202；
第二、三行没有数字；
第四行只有一个 44，输出 44。
第二个样例中只有一行，有两个数，和为 45328934532893。
第三个样例的第一行，由于每两个整数之间一定有间隔字符，所以把 - 视为间隔字符，输出 22。
第五行，第一个数为 -1−1，因此把第二个 - 视为间隔字符，和为 -1+1=0−1+1=0。
第七行，将 . 视为间隔字符，和为 -2+3=1−2+3=1。
【数据范围】

说明：「条件 A」指数据中不存在除数字、空格、换行、水平制表符之外的其他字符；「条件 B」指每两个数之间一定用且只用一个空格隔开。

由于数据在 Windows 下制造，行末可能有多余的 \r 字符。请注意。

对于 10\%10% 的数据，满足条件 A 和 B，每行一定有且仅有 1010 个数；

对于 40\%40% 的数据，满足条件 A 和 B，且不存在空行；

对于 50\%50% 的数据，满足条件 A 和 B；

对于 70\%70% 的数据，满足条件 A；

对于 100\%100% 的数据，不存在除水平制表符、空格、换行外的不可见字符，每行不超过 10001000 个字符，每行最多包含 200200 个整数，不超过 100100 行，每个整数均 \in[-10^7,10^7]∈[−10 
7
 ,10 
7
 ]。

思路：模拟
很麻烦的一道题，注意多种请情况字符调节就行了，不细说（其实是懒。。。）
样例给的很好，一遍AC

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include <string>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
#include<fstream>
#include<cmath>
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
#define Set(a) memset(a,0,sizeof(a))
#define F(i,a,b) for(register int i=a,i##end=b;i<=i##end;++i)
#define UF(i,a,b) for(register int i=a,i##end=b;i>=i##end;--i)
#define openf(a) freopen(#a".in","r",stdin);freopen(#a".out","w",stdout)
#define re register
#define ri re int
#define il inline
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
template<typename T> inline T rd(T& x)
{
	T f = 1; x = 0; char c = getchar();
	for (; !isdigit(c); c = getchar()) if (c == '-') f = -1;
	for (; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (T)(c - '0');
	x *= f;
	return x;
}
ll rd() { ll x; rd(x); return x; }
inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
const int inf = 1 << 30;

struct thing { int id; ll w, p; }a[200005];
bool operator<(thing a, thing b) { return a.w * (10000 - b.p) < b.w * (10000 - a.p); }
int n;
int main() {
	string s = "";
	while (getline(cin, s)) {
		bool flag = true;
		long long cur = 0, res = 0, curmodtwo = 0;
		for (int i = 0; i < s.size(); i++) {
			if (s[i] >= '0' && s[i] <= '9') {
				cur *= 10;
				curmodtwo = 1;
				cur += s[i] - '0';
			}
			else {
				if (flag)
					res += cur;
				else
					res -= cur;
				flag = true;
				cur = 0;
				if (s[i] == '-') {
					if (i - 1 >= 0 && (s[i - 1] < '0' || s[i - 1] > '9'))
						flag = false;
					if(i == 0)
						flag = false;
				}
				else
					flag = true;
			}
		}
		if (flag)
			res += cur;
		else
			res -= cur;
		if (curmodtwo != 0)
			cout << res << endl;
	}
}