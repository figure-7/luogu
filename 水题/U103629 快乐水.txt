题目背景
小 A 要去买快乐水。

题目描述
他来到了一家商店门前。

这家商店为了吸引顾客来买快乐水，搞了这么一个活动：「55 个瓶盖换一瓶快乐水」。于是，人们纷纷来他的店里买快乐水。

买完快乐水，他想到了一个问题：

如果一瓶快乐水有 mm 个附属品，对于第 ii 个附属品，每 a_ia 
i
​	
  个可以换一瓶全新的快乐水，现在我有买 nn 瓶快乐水的钱，我最多能喝多少快乐水呢？

输入格式
第一行两个整数 n,mn,m，意义如上。

接下来一行 mm 个整数 a_1,a_2,\cdots,a_ma 
1
​	
 ,a 
2
​	
 ,⋯,a 
m
​	
 ，意义如上。

输出格式
如果小 A 可以无限白嫖快乐水，那么输出一行一个字符串Inf。

否则，输出一行一个整数 ss，表示小 A 最多能喝的快乐水数量。

输入输出样例
输入 #1 复制
5 2
2 4
输出 #1 复制
15
输入 #2 复制
2 2
2 2
输出 #2 复制
Inf
说明/提示
样例一解释：

步数	已喝	未喝	附属品一	附属品二
1	0	5	0	0
2	5	0	5	5
3	5	3	1	1
4	8	0	4	4
5	8	3	0	0
6	11	0	3	3
7	11	1	1	3
8	12	0	2	4
9	12	2	0	0
10	14	0	2	2
11	14	1	0	2
12	15	0	1	3
样例二解释：

步数	已喝	未喝	附属品一	附属品二
1	0	2	0	0
2	2	0	2	2
3	2	2	0	0
4	4	0	2	2
5	4	2	0	0
6	6	0	2	2
7	6	2	0	0
8	8	0	2	2
9	\vdots⋮	\vdots⋮	\vdots⋮	\vdots⋮
很显然小 A 可以像这样无限白嫖快乐水。

注意：本题中，我们认为无法借还/赊账。

数据范围：

测试点一与样例二相同；

对于其中 30\%30% 的数据，n\le 100n≤100，m\le 2m≤2；

对于 100\%100% 的数据，1\le n\le 10^41≤n≤10 
4
 ，1\le m\le 51≤m≤5，1\le a_i\le 2\times10^31≤a 
i
​	
 ≤2×10 
3
 。

思路：模拟
将附属品兑换所需个数存入数组，另开一个数组初值都为总瓶子数（用来保存每种附属品个数）
遍历一次数组，每次求出能够兑换的数量累计，并累加到结果变量里，如果遇到总数大于等于所需兑换物数的就直接输出Inf结束即可
然后再算出余数赋值给对应附属品数组，结束便利后再遍历一次附属品数组，分别累加上上述累计值
直到一遍下来总数没变，最后输出结果变量即可

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
typedef long long ll;
typedef long double ld;
using namespace std;
#define INF 0x3f3f3f3f
#define MOD 100000000
#define debug() printf("Tairitsu Go PM!\n")
const int mod = 1e9 + 7;
inline int read()
{
	int x = 0; char s = getchar();
	while (!isdigit(s))s = getchar();
	while (isdigit(s))x = (x << 1) + (x << 3) + (s ^ 48), s = getchar();
	return x;
}//实现所有直接输入，可无视空格及回车
inline void print(int x)
{
	if (x < 10)putchar(x + '0');
	else {
		print(x / 10);
		putchar(x % 10 + '0');
	}
}//输出存在空格或回车需自行输出
int main() {
	long long n = read(), m = read(), summodtwo = 0, res = 0;
	vector<long long> curr(m, n), currmodtwo;
	long long sum = n;
	for (long long i = 0; i < m; i++) {
		long long a = read();
		currmodtwo.push_back(a);
	}
	while (res < sum) {
		res = sum;
		long long curmodtwo = 0;
		for (long long i = 0; i < m; i++) {
			long long summodtwo = sum;
			if (currmodtwo[i] >= summodtwo) {
				cout << "Inf";
				return 0;
			}
			sum += curr[i] / currmodtwo[i];
			long long cur = curr[i] / currmodtwo[i];
			curr[i] -= cur * currmodtwo[i];
			curmodtwo += cur;
		}
		for (long long i = 0; i < m; i++)
			curr[i] += curmodtwo;
	}
	cout << sum;
	return 0;
}