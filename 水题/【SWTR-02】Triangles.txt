普及-

Alex 遇到了两个谜题：

在一个平面内，线段 DEDE 与直线 FGFG 相交于点 OO，已知 \angle DOF=x^{\circ}∠DOF=x 
°
 ，请你在直线 FGFG 上找一点 PP，使得 \triangle DOP△DOP 为等腰三角形，求 \angle D∠D 的度数。（如果答案不是整数，则保留 11 位小数）

已知一个直角三角形的两条边分别为 m,nm,n，求第三条边的长度（保留 55 位小数）。



写一个程序求出问题的答案。

输入格式
一行三个正整数，分别为 x,m,nx,m,n。

输出格式
输出两行，第一行为第一问的答案，第二行为第二问的答案。

如果有多解，请用空格隔开，且从小到大输出。

输入输出样例
输入 #1 复制
60 1 1
输出 #1 复制
30 60
1.41421
说明/提示
样例说明
问题 11：

当点 PP 在点 OO 左边时，形成的 \triangle DOP△DOP 为等边三角形，\angle D=60^{\circ}∠D=60 
°
 。

当点 PP 在点 OO 右边时，形成的 \triangle DOP△DOP 中，\angle DOP=180^{\circ}-60^{\circ}=120^{\circ}∠DOP=180 
°
 ?60 
°
 =120 
°
 ，为顶角，\angle D=(180^{\circ}-120^{\circ})/2=30^{\circ}∠D=(180 
°
 ?120 
°
 )/2=30 
°
 。

问题 22：

第三条边为斜边，长度为 \sqrt{1^2+1^2}=\sqrt{2}=1.41421\dots 
1 
2
 +1 
2
 
?	
 = 
2
?	
 =1.41421…。

数据范围与约定
x<90,m\leq n\leq 10^9x<90,m≤n≤10 
9
 。

出题组提示：
方法千万条，审题第一条，多解不考虑，爆零两行泪。（样例很弱）

思路：大数据题，首先不能使用ll类型数据，因为需要输出小数，多以这题使用了ld类型
在判断三角形时，需要考虑以下几种情况：
1：第三条边在左侧，且第三条边长度等于OD
2：第三条边在右侧，且OG长度等于OD
3：第三条边在左侧，且OF等于OD
4：第三条边在左侧，且第三条边长度等于OF
把所有情况都算出来后放入数组删除重复值后再排序（注意可能会有重复值）
最后应该判断是否存在小数位，这里直接用int转化然后与原数值判断是否相等即可
不等就证明存在小数，要保留一位小数（角度最后为.5度）
至此，第一个问题解决
（这里我判断了一下钝角的情况，效率慢了，最后重新审题发现输入是锐角。。。）
在判断直角三角形三边时，需要考虑以下几种情况：
1：输入两个值相等，取平方后累加开方，直接输出%.5Lf即可
2：输入两个值不相等，取平方后累加开方，取平方后大减小开方，将两个数输出%.5Lf，中间用空格隔开即可
至此，第二个问题解决
至此，结束！（还是挺麻烦的）
接下来上丢人代码（不是时间满分，数据全过）（67/75）：：

上代码：
#include<iostream>
#pragma warning(disable:4996)
#include<cstring>
#include<cstdio>
#include<algorithm>
#include <vector>
#include <queue>
#include <map>
#include <math.h>
typedef long long ll;
typedef long double ld;
using namespace std;
int main() {
	vector<float> res;
	vector<ld> resmodtwo;
	float x;
	ld m,n;
	cin >> x >> m >> n;
	if (x > 90)
		res.push_back(180 - x);
	else
		res.push_back(x);
	float a = (180 - x) / 2;
	float b = 180 - 2 * x;
	res.push_back(a);
	res.push_back(b);
	float c = 180 - x;
	float d = (180 - c) / 2;
	float e = 180 - 2 * c;
	res.push_back(d);
	res.push_back(e);
	sort(res.begin(), res.end());
	int nn = unique(res.begin(), res.end()) - res.begin();
	while (res.size() > nn)
		res.pop_back();
	if(x != 0)
		for (int i = 0; i < res.size(); i++)
			if (res[i] > 0) {
				int aim = res[i];
				if(res[i] > aim)
					printf("%.1f ", res[i]);
				else
					printf("%.0f ", res[i]);
			}
	printf("\n");
	ld curr = 0;
	ld q = m * m;
	ld w = n * n;
	curr = sqrt(q + w);
	if (m == n) {
		printf("%.5Lf", curr);
	}
	else {
		resmodtwo.push_back(curr);
		if (q > w)
			curr = sqrt(q - w);
		else
			curr = sqrt(w - q);
		resmodtwo.push_back(curr);
		sort(resmodtwo.begin(), resmodtwo.end());
		for (int i = 0; i < resmodtwo.size(); i++) {
			printf("%.5Lf ", resmodtwo[i]);
		}
	}
}