NOI/NOI+/CTSC

B 城可视为一个 n \times nn×n 的方阵，其中监狱在 (1,1)(1,1)，B 城唯一出城的出口在 (n,n)(n,n)。每两个相邻的点（横坐标之差的绝对值 ++ 纵坐标之间的绝对值 =1=1）之间都有一条无向的道路（没有斜着的道路）。

你需要在一些道路上部下防守，使得无论 zbw 怎么走，都至少会经过其中的一条道路。

在一条 (i,j)(i,j) 到 (i,j+1)(i,j+1) 的道路上部下防守的花费是 r_{i,j}r 
i,j
​	
 ，在一条 (i,j)(i,j) 到 (i+1,j)(i+1,j) 的道路上部下防守的花费是 d_{i,j}d 
i,j
​	
 ，同时，在道路上部下防守会对人民的生活造成影响，在一条 (i,j)(i,j) 到 (i,j+1)(i,j+1) 的道路上部下防守对人民的生活造成的影响是 x_{i,j}x 
i,j
​	
 ，在一条 (i,j)(i,j) 到 (i+1,j)(i+1,j) 的道路上部下防守对人民的生活造成的影响是 y_{i,j}y 
i,j
​	
 。

定义总花费为 ww ，总影响为 ee ，作为一名优秀的警察局长，你需要最小化 w \times ew×e。

输入格式
第一行一个整数 nn。

之后的 n \times (n-1)n×(n−1) 行，第 ii 行两个整数 r_{i/n+1,(i-1)\bmod n+1}r 
i/n+1,(i−1)modn+1
​	
 ， x_{i/n+1,(i-1)\bmod n+1}x 
i/n+1,(i−1)modn+1
​	
 。

之后的 n \times (n-1)n×(n−1) 行，第 ii 行两个整数 d_{i/n+1,(i-1)\bmod n+1}d 
i/n+1,(i−1)modn+1
​	
  ，y_{i/n+1,(i-1)\bmod n+1}y 
i/n+1,(i−1)modn+1
​	
 。

也就是说，先从上往下给从左往右给出竖边的信息，再从上往下给从左往右给出横边的信息。

如果不理解请见样例解释。

输出格式
一行一个整数，表示 w \times ew×e 的最小值。

输入输出样例
输入 #1 复制
3
8 3
5 2
1 1
4 2
1 2
7 5
7 2
6 1
5 4
2 3
1 4 
4 3
输出 #1 复制
49
说明/提示


如图，左上角为 (1,1)(1,1)，右下角为 (n,n)(n,n)， 其中蓝色数字表示 rr, 红色数字表示 xx, 黄色数字表示 dd, 绿色数字表示 yy。

最优方案为防守三条边，分别为：

(2,2)-(2,3),(3,1)-(3,2),(3,2)-(3,3)(2,2)−(2,3),(3,1)−(3,2),(3,2)−(3,3)

三条边的边权分别是 2,32,3---1,11,1 ---4,34,3

答案为 (1+2+4)\times (1+3+3)=49(1+2+4)×(1+3+3)=49

可以发现没有更优的做法。

本题采用捆绑测试。

Subtasks	nn	特殊性质	分数
Subtask1	n=2n=2	无	55
Subtask2	n\leq400n≤400	数据随机	1515
Subtask3	n\leq10n≤10	无	1515
Subtask4	n\leq50n≤50	无	3030
Subtask5	n\leq400n≤400	无	3535
对于所有数据 1 \leq n \leq 4001≤n≤400，1 \leq r_{i,j}, d_{i,j},x_{i,j} ,y_{i,j} \leq 10^31≤r 
i,j
​	
 ,d 
i,j
​	
 ,x 
i,j
​	
 ,y 
i,j
​	
 ≤10 
3
 。

思路：网络流

上代码：
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<iostream>
#define re 
#define int long long
#define ll long long
using namespace std;
int read(){
    re int t=0;
    re char v=getchar();
    while(v<'0'&&v<='9')v=getchar();
    while(v>='0'&&v<='9'){
        t=(t<<3)+(t<<1)+v-48;
        v=getchar(); 
    }
    return t;
}
int n,m;
struct pnt{
    int x,y;
}ans; 
struct vec{
    int sx,sy,tx,ty;
};
inline int cj(re pnt A,re pnt B){
    return A.x*B.y-A.y*B.x;
}
struct edge{
    int to,next,w,x,y;
}e[5000003];
int cnt,head[2500003],s,t;
void add(re int x,re int y,re int z,re int a,re int b){
    e[++cnt].to=y;
    e[cnt].w=z;
    e[cnt].next=head[x];
    head[x]=cnt;
    e[cnt].x=a;
    e[cnt].y=b;
}
struct aaa{
    int pos;
    int dis;
    pnt x;
    bool operator <(const aaa x)const{
        return dis>x.dis;
    }
}h[2500003];
priority_queue <aaa> q;
ll M(re ll x,re ll y){
    return (x<y)?(x):(y);
}
pnt dis(re int s){
    for(re int i=0;i<=t;++i)h[i].dis=1e9,h[i].x.x=h[i].x.y=0,h[i].pos=i;
    h[s].dis=0;
    q.push(h[s]);
    while(!q.empty()){
        aaa tmp=q.top();
        q.pop();
        for(re int i=head[tmp.pos];i;i=e[i].next){
            if((tmp.dis+e[i].w)<h[e[i].to].dis){
                h[e[i].to].dis=tmp.dis+e[i].w;
                h[e[i].to].x.x=h[tmp.pos].x.x+e[i].x;
                h[e[i].to].x.y=h[tmp.pos].x.y+e[i].y; 
                q.push(h[e[i].to]);
            }
        }
     }

     if(h[t].x.x*h[t].x.y<ans.x*ans.y)ans=h[t].x;
     return h[t].x;
}int f[503][503],f1[503][503],g[503][503],g1[503][503];
void div(re pnt A,re pnt B){
    cnt=0;
    memset(head,0,sizeof(head));
    for(re int i=1;i<n;++i){
        for(re int j=1;j<n;++j){
            int pos=(i-1)*(n-1)+j;
            if(j!=n-1){
                add(pos,pos+1,f[i][j+1]*(A.y-B.y)+f1[i][j+1]*(B.x-A.x),f[i][j+1],f1[i][j+1]);
                add(pos+1,pos,f[i][j+1]*(A.y-B.y)+f1[i][j+1]*(B.x-A.x),f[i][j+1],f1[i][j+1]);
            } 
            if(i!=n-1){
                add(pos,pos+n-1,g[i+1][j]*(A.y-B.y)+g1[i+1][j]*(B.x-A.x),g[i+1][j],g1[i+1][j]);
                add(pos+n-1,pos,g[i+1][j]*(A.y-B.y)+g1[i+1][j]*(B.x-A.x),g[i+1][j],g1[i+1][j]);
            }
        }
    }
    for(re int i=1;i<n;++i){
        add(s,i,g[1][i]*(A.y-B.y)+g1[1][i]*(B.x-A.x),g[1][i],g1[1][i]);
        add(i+(n-1)*(n-2),t,g[n][i]*(A.y-B.y)+g1[n][i]*(B.x-A.x),g[n][i],g1[n][i]);
        add((i-1)*(n-1)+1,t,f[i][1]*(A.y-B.y)+f1[i][1]*(B.x-A.x),f[i][1],f1[i][1]);
        add(s,(i-1)*(n-1)+n-1,f[i][n]*(A.y-B.y)+f1[i][n]*(B.x-A.x),f[i][n],f1[i][n]);
    }
    pnt C=dis(s);
    if(cj(pnt{B.x-A.x,B.y-A.y},pnt{C.x-A.x,C.y-A.y})>=0)return;
    div(A,C);div(C,B); 
    }

signed main(){
    ans.x=1e9;
    ans.y=1e9;
    n=read();
    s=0;
    t=(n-1)*(n-1)+2;
    for(re int i=1;i<n;++i){
        for(re int j=1;j<=n;++j)
        f[i][j]=read(),f1[i][j]=read();
    }
    for(re int i=1;i<=n;++i){
        for(re int j=1;j<n;++j)
        g[i][j]=read(),g1[i][j]=read();
    }
    cnt=0;
    memset(head,0,sizeof(head));
    for(re int i=1;i<n;++i){
        for(re int j=1;j<n;++j){
            int pos=(i-1)*(n-1)+j;
            if(j!=n-1){
                add(pos,pos+1,f[i][j+1],f[i][j+1],f1[i][j+1]);
                add(pos+1,pos,f[i][j+1],f[i][j+1],f1[i][j+1]);
            } 
            if(i!=n-1){
                add(pos,pos+n-1,g[i+1][j],g[i+1][j],g1[i+1][j]);
                add(pos+n-1,pos,g[i+1][j],g[i+1][j],g1[i+1][j]);
            }
        }
    }
    for(re int i=1;i<n;++i){
        add(s,i,g[1][i],g[1][i],g1[1][i]);
        add(i+(n-1)*(n-2),t,g[n][i],g[n][i],g1[n][i]);
        add((i-1)*(n-1)+1,t,f[i][1],f[i][1],f1[i][1]);
        add(s,(i-1)*(n-1)+n-1,f[i][n],f[i][n],f1[i][n]);
    }
    pnt A=dis(s);
    cnt=0;
    memset(head,0,sizeof(head));
    for(re int i=1;i<n;++i){
        for(re int j=1;j<n;++j){
            int pos=(i-1)*(n-1)+j;
            if(j!=n-1){
                add(pos,pos+1,f1[i][j+1],f[i][j+1],f1[i][j+1]);
                add(pos+1,pos,f1[i][j+1],f[i][j+1],f1[i][j+1]);
            } 
            if(i!=n-1){
                add(pos,pos+n-1,g1[i+1][j],g[i+1][j],g1[i+1][j]);
                add(pos+n-1,pos,g1[i+1][j],g[i+1][j],g1[i+1][j]);
            }
        }
    }
    for(re int i=1;i<n;++i){
        add(s,i,g1[1][i],g[1][i],g1[1][i]);
        add(i+(n-1)*(n-2),t,g1[n][i],g[n][i],g1[n][i]);
        add((i-1)*(n-1)+1,t,f1[i][1],f[i][1],f1[i][1]);
        add(s,(i-1)*(n-1)+n-1,f1[i][n],f[i][n],f1[i][n]);
    }
    pnt B=dis(s);   div(A,B);
printf("%lld",ans.x*ans.y);
}
