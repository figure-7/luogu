提高+/省选-

思路：
DFS+BackTracing+DP+剪枝+枚举

个人见解：
首先DFS+BackTracing，通过深搜遍历出所有要取到的行，方法就是回溯全排列问题
同时剪枝，当需要取到剩下的行数不满足所需要取得行数时，（因为是按顺序取的所以可以剪枝）
然后再dp,dp,再dp...总之之间的流程很麻烦，先通过行数枚举出每行差值进数组，然后通过列数枚举出每列差值进数组
之后再dp：f[i][j]=min(f[k][j-1]+lc[i]+hc[i][k])，这里不咋明白了。。。（线性dp应该是个模板，硬记吧）
dp再考虑边界情况，这里直接看题解吧，说的挺明白详细，不打字了

之后上专业题解：
首先介绍一下这一题的暴力思路。
其实暴力思路很简单，就是枚举行的所有可能组合，再枚举列的所有可能组合，然后对其进行如题目所述般的处理，然后取所有情况的最小值。

但是，这样的时间复杂度是O(C(n,n/2)^2*n^2)，对于所有数据，可能的最大运算总数是C(16,8)^2，本人计算了一下，大约已经有三百亿了（注意后面那个n^2，它是处理（即）每一个情况时所花的时间复杂度），所以不可能过所有的数据点（本人试验了一下，只有60分）。
很多人因此止步，是因为都在想着正解会不会是根本不用枚举情况，直接O(n^k)（k不知道是多少……）DP就搞定了。
那我告诉各位，正解其实还是要枚举的……所以，这里一定要注意，不要被传统的DP形式坑了。
做法的结构大致是这样的：首先枚举其行的排列情况（类似全排列，只是元素个数确定）。

然后，对于每一种行的排列情况，DP出它列的最优情况（DP等会儿再讲），然后取所有行的排列情况的最优情况的最小值。
这样，就只需要一维的枚举了，比暴力快了不少。有的人可能还会问，这样会不会也超时？
我们来算一下。这样的结构时间复杂度是：O(C(n,n/2)*n^3)，其中(C(n,n/2)是一维枚举的时间复杂度，n^3是DP的时间复杂度。
那么，对于所有数据，它最多的运算次数是：C(16,8)*16^3，大约是五千万，是可以通过的。
所以只要把细节打出来，此题就过了。

那么，具体的算法如何实现呢？
首先，枚举就不用讲了（代码里会讲到一点优化剪枝），然后就是DP的事了。
问题就在于如何DP呢？
其实，我们可以针对每一种枚举出来的行的情况都进行一次类似的DP。
而针对于每一种情况，我们可以把它抽象化成一个更简单的问题：
一个r*m矩阵，选择c列，问其相邻元素的差的绝对值的和最小是多少？
在这个r*m的矩阵中，那r行其实就是我们已经枚举出来的几行，而m和c与原题中的m和c相同，从而将二维选择的问题降至了一维。

而DP也变得十分明显了：
设f[i][j]表示在这个r*m的矩阵中，在其前i列中选择j列（且选的列中包括第i列），组成的子矩阵中，最小值（即其相邻元素的差的绝对值的和的最小值（之后的值等表达也是指的这个东西，即题目要求求出的值））是多少。
这样，便可以很显然的推出动态转移方程：

f[i][j]=min(f[k][j-1]+lc[i]+hc[i][k])
这里的lc[i]指的是第i列中所有元素的值，而hc[i][j]指的是仅对于第i列与第j列之间，所有同行元素的差的绝对值的和。
懂线性DP的同学应该都能理解这个动态转移方程。
而求lc与hc也很简单，直接在DP前暴力预处理即可。
于是，DP便写完了。

而此题并没有到此结束，因为边界条件也是需要格外注意的。
首先是k，k的取值范围是从j-1到i-1。i-1很好理解，而j-1是因为若k小于j-1，则k<j-1，f[k][j-1]这个状态也就自然不存在了（从定义上很好理解）。
所以得出了k的取值范围。

另外需要注意的是边界情况，有两个边界：

第一个是j==1的情况，此时f[i][j]=lc[i]
第二个是j==i的情况，即前i列都取，所以f[i][j]=f[i-1][j-1]+lc[i]+hc[i][j-1]。将DP写好，此题便处理完成了。
写了这么多，总结一下吧。
DP题很容易被看出来，但是总是因为DP的变换莫测难以入手。
所以，一定要好好地练DP。

上代码：
#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<algorithm>
#include<cmath>
#include<queue>
#include<vector>
using namespace std;
int n,m,r,c;
int num[20][20]={0};
int ch[20]={0},gs=1;//dfs数组
int lc[20]={0},hc[20][20]={0};
int f[20][20];//DP数组
void mems()//预处理
{
    for(int i=1;i<=m;i++)//预处理lc[i]
    {
        lc[i]=0;
        for(int j=1;j<r;j++)
        {
            lc[i]+=abs(num[ch[j]][i]-num[ch[j+1]][i]);//计和
        }
    }
    for(int i=2;i<=m;i++)//预处理hc[i][j]（前提条件：i>j）
    {
        for(int j=1;j<i;j++)
        {
            hc[i][j]=0;
            for(int k=1;k<=r;k++)
            {
                hc[i][j]+=abs(num[ch[k]][i]-num[ch[k]][j]);//计和
            }
        }
    }
}
int minn=2e9;//全部状态的最小值，即输出
int cmin;
void dp()//DP
{
    for(int i=1;i<=m;i++)//枚举i
    {
        cmin=min(i,c);//j的边界值（一定要注意不能大于c）
        for(int j=1;j<=cmin;j++)
        {
            if(j==1)//第一种边界
            {
                f[i][j]=lc[i];
            }
            else
            if(i==j)//第二种边界
            {
                f[i][j]=f[i-1][j-1]+lc[i]+hc[i][j-1];
            }
            else//正常情况
            {
                f[i][j]=2e8;//初始化，取inf
                for(int k=j-1;k<i;k++)//注意边界
                {
                    f[i][j]=min(f[i][j],f[k][j-1]+lc[i]+hc[i][k]);//取最小值
                }
            }
            if(j==c)minn=min(minn,f[i][c]);//存在此状态，则更新最小值
        }
    }
}
void dfs(int node)//枚举
{
    if(node>n)//已经取到了一种状态
    {
        mems();
        dp();
        return;
    }
    if(r-gs+1==n-node+1)//这里就是解释中所述的优化。如果node和node以后的元素必须全部取完，才能满足刚好有r个的条件，则必须取node，否则便会取到少于r个元素的情况。样保证了node>n时所有情况都刚好有r个，这便是个优化剪枝
    {
        ch[gs++]=node;
        dfs(node+1);
        ch[gs--]=0;//记得gs要减回来
        return;
    }
    dfs(node+1);//不取node
    if(gs<=r)//如果已经取满了r个元素，便不能再取了
    {
        ch[gs++]=node;
        dfs(node+1);
        ch[gs--]=0;
    }
}
int main()
{
    scanf("%d%d%d%d",&n,&m,&r,&c);//读入
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            scanf("%d",&num[i][j]);
        }
    }
    dfs(1);//主要过程
    printf("%d",minn);//输出
    return 0;
}