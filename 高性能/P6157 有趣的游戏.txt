题目背景
小 A 和小 B 正在玩一个有趣的电脑游戏。

题目描述
游戏在一棵大小为 nn 的树上进行。其中每个点都有点权，第 ii 个点的点权为 w_iw 
i
​	
 。

每一次系统会给出一条链，小 A 可以从这条链上找出两个点权不同的点 x,yx,y，他的得分是 w_x\bmod w_yw 
x
​	
 modw 
y
​	
 。然后小 B 会从整棵树中选取两个小 A 没有选过的点，计分方式同小 A。

为了保持游戏难度，系统有时会增加一个点的权值。

当然，小 A 会尽可能使自己得分最大，他想知道这个值是多少。

同时，他想知道，在自己得分最大的情况下，小 B 的最大得分是多少。

输入格式
第一行一个整数 nn 表示树的节点个数。

接下来 n-1n−1 行，每行两个整数 a,ba,b，表示 a,ba,b 之间有一条边。

接下来一行 nn 个整数，第 ii 个数表示第 ii 个点的点权。

接下来一行一个整数 qq。

接下来 qq 行，每行三个整数 opt,x,yopt,x,y。

若 opt=0opt=0，将 w_xw 
x
​	
  增加 yy。

若 opt=1opt=1，表示系统给出一条从 xx 到 yy 的链。

输出格式
对于每一次 opt=1opt=1，输出一行两个整数 suma,sumbsuma,sumb 。
分别表示小 A 的最大得分和在这情况下小 B 的最大得分 。

如果小 A 无法选出两个权值不同的点，那么只输出一个数 -1−1。

输入输出样例
输入 #1 复制
7
1 2
2 3
2 4
1 5
5 6
5 7
5 4 3 2 1 4 3
6
1 3 4
1 2 5
1 2 1
0 2 1
1 2 5
1 2 1
输出 #1 复制
3 4
4 3
4 3
1 4
-1
说明/提示
样例解释：

第一次：小 A 选择点 33 和点 22，得分为 3\bmod 4=33mod4=3，小 B 选择点 66 和点 11 得分为 4\bmod 5=44mod5=4。

第二次：小 A 选择点 22 和点 11，得分为 4\bmod 5=44mod5=4，小 B 选择点 77 和点 66 得分为 3\bmod 4=33mod4=3。

第三次：小 A 选择点 22 和点 11，得分为 4\bmod 5=44mod5=4，小 B 选择点 77 和点 66 得分为 3\bmod 4=33mod4=3。

第四次：第 22 个点点权变为 55。

第五次：小 A 选择点 55 和点 11，得分为 1\bmod 5=11mod5=1，小 B 选择点 66 和点 22 得分为 4\bmod 5=44mod5=4。

第六次：小 A 可以选的点只有 1,21,2 ，点权都是 55，没有可以选的方案。

本题采用捆绑测试。

Subtasks	n,qn,q	特殊性质	分数
Subtask1	\leq10^3≤10 
3
 	无	1010
Subtask2	\leq10^5≤10 
5
 	树的形态，点权随机	1515
Subtask3	\leq10^5≤10 
5
 	最多有 55 种不同的点权，且没有修改	1515
Subtask4	\leq10^5≤10 
5
 	树为一条链，且第 ii(i>1)(i>1) 个点的父亲为 i-1i−1	2525
Subtask5	\leq10^5≤10 
5
 	无	3535
对于所有数据 1 \leq n,q \leq 10^51≤n,q≤10 
5
 ，1 \leq w_i \leq 10^41≤w 
i
​	
 ≤10 
4
 ，增加的数为不大于 10^310 
3
  的正整数，且输入为一棵合法的树。
保证任何时候不同种类的数大于等于 44。

思路：线段树+桶
其实本题难度只有 T3T3 ，但因为出题人代码毒瘤了，就把这道题放到了 T5T5 。

这里，我们先要证明一个结论:

在一个固定的集合中 \max(b_i \bmod b_j)=max(b 
i
​	 modb 
j
​	 )= 严格次大值

证明:如果 b_i>b_jb 
i
​	 >b 
j
​	  ，那么交换 b_i,b_jb 
i
​	 ,b 
j
​	  肯定更优(余数小于除数)，如果 b_i<b_jb 
i
​	 <b 
j
​	  ，那么 b_i\bmod b_j=b_ib 
i
​	 modb 
j
​	 =b 
i
​	  ，所以求的是一个尽可能大而不是最大的值。即为严格次大值。

Subtask1: n,q \le1000n,q≤1000

暴力枚举找严格次大值，时间复杂度 O(nq)O(nq) 。

Subtask2:数据随机

可以使用各种乱搞方法。

Subtask3:没有修改，点权不多于 55 种。

可以提前离散化+桶，维护到根的所有值个数，询问时减去 LCALCA 即可。

Subtask4:树为一条链

观察，我们可以用线段树维护区间次大值，假如询问的是 l,rl,r ，那么只需要求出 l\sim rl∼r 的严格次大值和 1\sim l-11∼l−1 和 r+1 \sim nr+1∼n 的严格次大值。所以构建一个可以维护严格次大值的线段树即可。时间复杂度 O((n+q)\log n)O((n+q)logn) 。

Subtask5:无特殊条件

至于小 A，可以想到用树链剖分，维护最大值和严格次大值即可。但对于小 BB 来说，我们可以根据 Subtask3 的思想，开桶维护，但开太多桶时间无法接受。可以发现，无论小 A 怎么选，小 B 都可以得到大于严格第四大值的答案（小 A 只能选两个数），所以我们还需要维护一些东西：全局最大值及个数，全局严格次大值及个数，全局严格第三大值及个数，全局严格第四大值。
修改的时候维护有点复杂，需要先删掉再加入（如果是全局严格前四大）。

上代码：
#include<bits/stdc++.h>
#pragma comment(linker, "/STACK:102400000,102400000") 
#define in inline
#define re register
using namespace std;
in int read() {
    re int t=0,f=1;
    re char v=getchar();
    while(v<'0'||v>'9') {
        if(v=='-')f=-1;
        v=getchar();
    }
    while(v>='0'&&v<='9') {
        t=(t<<3)+(t*2)+(v^48);
        v=getchar();
    }
    return t*f;
}
int n,m,mx1,mx2,mx3,mx4,cnt1,cnt2,cnt3,fa[100002],siz[100002],dep[100002],son[100002],ans1,mxcnt,seccnt,mxcnt1,ans2,pl[100002],tot,tp[100002],fp[100002],a,b,c,head[200002],cnt,treemx[400002],w[100002],treesec[400002],q;
int s;
struct edge {
    int to,next;
} e[200002];
in void bu(re int x,re int y) {
    e[++cnt].to=y;
    e[cnt].next=head[x];
    head[x]=cnt;
}
in void dfs(re int x,re int y) {
    dep[x]=dep[y]+1;
    siz[x]=1;
    int mxs=0,mxp=0;
    fa[x]=y;
    for(re int i=head[x]; i; i=e[i].next) {
        if(e[i].to!=y) {
            dfs(e[i].to,x);
            if(siz[e[i].to]>mxs) {
                mxs=siz[e[i].to];
                mxp=e[i].to;
            }
            siz[x]+=siz[e[i].to];
        }
    }
    son[x]=mxp;
}
in void dfs1(re int x,re int y) {
    tp[x]=y;
    fp[++tot]=x;
    pl[x]=tot;
    if(son[x])dfs1(son[x],y);
    for(re int i=head[x]; i; i=e[i].next) {
        if(e[i].to!=fa[x]&&e[i].to!=son[x]) {
            dfs1(e[i].to,e[i].to);
        }
    }
}
in void build(re int p,re int l,re int r) {
    if(l==r) {
        treemx[p]=w[fp[l]];
        return;
    }
    build((p*2),l,((l+r)/2));
    build((p*2)+1,((l+r)/2)+1,r);
    if(treemx[p*2]>treemx[p]){
        treesec[p]=treemx[p];
        treemx[p]=treemx[p*2];
    }
    else if(treemx[p*2]>treesec[p]&&treemx[p*2]!=treemx[p]){
        treesec[p]=treemx[p*2];
    }
    if(treesec[p*2]>treesec[p]){
        treesec[p]=treesec[p*2];
    }
    if(treemx[p*2+1]>treemx[p]){
        treesec[p]=treemx[p];
        treemx[p]=treemx[p*2+1];
    }
    else if(treemx[p*2+1]>treesec[p]&&treemx[p*2+1]!=treemx[p]){
        treesec[p]=treemx[p*2+1];
    }
    if(treesec[p*2+1]>treesec[p]){
        treesec[p]=treesec[p*2+1];
    }
}
in void cg(re int p,re int l,re int r,re int x,re int w) {
    if(l==r&&l==x) {
        treemx[p]+=w;
        return;
    }
    if(l>x)return;
    if(r<x)return;
    cg((p*2),l,(l+r)/2,x,w);
    cg((p*2)+1,(l+r)/2+1,r,x,w);
    treemx[p]=treesec[p]=0;
    if(treemx[p*2]>treemx[p]){
        treesec[p]=treemx[p];
        treemx[p]=treemx[p*2];
    }
    else if(treemx[p*2]>treesec[p]&&treemx[p*2]!=treemx[p]){
        treesec[p]=treemx[p*2];
    }
    if(treesec[p*2]>treesec[p]){
        treesec[p]=treesec[p*2];
    }
    if(treemx[p*2+1]>treemx[p]){
        treesec[p]=treemx[p];
        treemx[p]=treemx[p*2+1];
    }
    else if(treemx[p*2+1]>treesec[p]&&treemx[p*2+1]!=treemx[p]){
        treesec[p]=treemx[p*2+1];
    }
    if(treesec[p*2+1]>treesec[p]){
        treesec[p]=treesec[p*2+1];
    }
}

in void askmx(re int p,re int l,re int r,re int x,re int y) {
    if(l>=x&&r<=y) {
        if(treemx[p]>ans1){
            ans2=ans1;
            ans1=treemx[p];
        }
        else if(treemx[p]>ans2&&treemx[p]!=ans1){
            ans2=treemx[p];
        }
        if(treesec[p]>ans2){
            ans2=treesec[p];
        }
        return;
    }
    if(l>y)return;
    if(r<x)return;
    askmx((p*2),l,((l+r)/2),x,y);askmx((p*2)+1,((l+r)/2+1),r,x,y);
    return;
}
inline void add(re int x){//加入一个值，对全局前四大的值的影响 
    if(x>mx1){
        mx4=mx3;
        mx3=mx2;
        cnt3=cnt2;
        mx2=mx1;
        cnt2=cnt1;
        mx1=x;
        cnt1=1;
    }
    else if(x==mx1){
        ++cnt1;
    }
    else if(x>mx2){
        mx4=mx3;
        mx3=mx2;
        cnt3=cnt2;
        mx2=x;
        cnt2=1;
    }
    else if(x==mx2){
        ++cnt2;
    }
    else if(x>mx3){
        mx4=mx3;
        mx3=x;
        cnt3=1;
    }
    else if(x==mx3){
        ++cnt3;
    }
    else if(x>mx4){
        mx4=x;
    }
}
int main() {
    n=read();
    for(re int i=1; i<n; ++i) {
        a=read();
        b=read();
        bu(a,b);
        bu(b,a);
    }
    for(re int i=1; i<=n; ++i){
    w[i]=read();
    add(w[i]);}
    dfs(1,1);
    dfs1(1,1);
    build(1,1,n);
    scanf("%d",&q);
    while(q--) {
        scanf("%d%d%d",&s,&a,&b);
        if(s==0) {
            if(w[a]==mx1){
                --cnt1;
                if(!cnt1){
                cnt1=cnt2;
                cnt2=cnt3;
                mx1=mx2;
                mx2=mx3;
                mx3=mx4;
                }   
            }
            else if (w[a]==mx2){
                --cnt2; 
                if(!cnt2){  
                mx2=mx3;
                mx3=mx4;
                cnt2=cnt3;
                }           
            }
            else if (w[a]==mx3){
                --cnt3;
                if(!cnt3){
                mx3=mx4;
                }   
            }
            w[a]+=b;
            add(w[a]);
            cg(1,1,n,pl[a],b);
        } 
        else {
            ans1=ans2=0;
            while(tp[a]!=tp[b]) {
                    if(dep[tp[a]]>dep[tp[b]]) {
                        askmx(1,1,n,pl[tp[a]],pl[a]);
                        a=tp[a];
                        a=fa[a];
                    } else {
                        askmx(1,1,n,pl[tp[b]],pl[b]);
                        b=tp[b];
                        b=fa[b];
                    }
                }
            if(dep[a]>dep[b])askmx(1,1,n,pl[b],pl[a]);
            else askmx(1,1,n,pl[a],pl[b]);
            int Mx=0,Mx1=0;
            if(ans1==mx1){if(cnt1>=2)Mx=mx1;}
            else Mx=mx1;
            if(ans1==mx2||ans2==mx2){if(cnt2>=2)if(!Mx)Mx=mx2;else Mx1=mx2;}
            else {if(!Mx)Mx=mx2;else Mx1=mx2; }
            if(ans1==mx3||ans2==mx3){if(cnt3>=2)if(!Mx)Mx=mx3;else if(!Mx1)Mx1=mx3;}
            else {if(!Mx)Mx=mx3;else if(!Mx1)Mx1=mx3;}
            if(!Mx1)Mx1=mx4;
            if(ans2)printf("%d %d\n",ans2,Mx1);
            else puts("-1");
        }
    }
}